;; database name = connect string
[databases]

p0 = port=6666 host=localhost dbname=p0 user=bouncer pool_size=2
p1 = port=6666 host=localhost dbname=p1 user=bouncer
p2 = port=6668 host=localhost dbname=p2 user=bouncer

;; Configuation section
[pgbouncer]

;;;
;;; Administrative settings
;;;

logfile = tmp/test.log
pidfile = tmp/test.pid

;;;
;;; Where to wait for clients
;;;

; ip address or * which means all ip-s
listen_addr = 127.0.0.1
listen_port = 6667
unix_socket_dir = /tmp

;;;
;;; Authentication settings
;;;

; any, trust, plain, crypt, md5
;auth_type = trust
auth_file = tmp/userlist.txt

;;;
;;; Pooler personality questions
;;;

; When server connection is released back to pool:
;   session      - after client disconnects
;   transaction  - after transaction finishes
;   statement    - after statement finishes
pool_mode = statement

; When taking idle server into use, this query is ran first.
;
; Query for session pooling:
;   ABORT; RESET ALL; SET SESSION AUTHORIZATION DEFAULT
; Query for statement/transaction pooling:
;   SELECT 1
; Empty query disables the functionality
server_check_query = select 1

; If server was used more recently that this many seconds ago,
; skip the check query.  If 0, the check query is always ran.
server_check_delay = 10

;;;
;;; Connection limits
;;;

; total number of clients that can connect
max_client_conn = 10
default_pool_size = 5

;;;
;;; Timeouts
;;;

; Close server connection if its been connected longer.
server_lifetime = 120

; Close server connection if its not been used in this time.
; Allows to clean unneccessary connections from pool after peak.
server_idle_timeout = 60

; Cancel connection attepmt if server does not answer takes longer.
server_connect_timeout = 15

; If server login failed (server_connect_timeout or auth failure)
; then wait this many second.
server_login_retry = 15

; Dangerous.  Server connection is closed if query does not return
; in this time.  Should be used to survive network problems,
; _not_ as statement_timeout. (default: 0)
query_timeout = 0

; Dangerous.  Client connection is closed if no activity in this time.
; Should be used to survive network problems. (default: 0)
client_idle_timeout = 0


